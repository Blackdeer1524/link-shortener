// Code generated by mockery v2.43.2. DO NOT EDIT.

package storage

import (
	context "context"
	responses "shortener/pkg/responses"

	mock "github.com/stretchr/testify/mock"
)

// MockUrls is an autogenerated mock type for the Urls type
type MockUrls struct {
	mock.Mock
}

type MockUrls_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUrls) EXPECT() *MockUrls_Expecter {
	return &MockUrls_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, rr
func (_m *MockUrls) Insert(ctx context.Context, rr []*responses.Shortener) {
	_m.Called(ctx, rr)
}

// MockUrls_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockUrls_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - rr []*responses.Shortener
func (_e *MockUrls_Expecter) Insert(ctx interface{}, rr interface{}) *MockUrls_Insert_Call {
	return &MockUrls_Insert_Call{Call: _e.mock.On("Insert", ctx, rr)}
}

func (_c *MockUrls_Insert_Call) Run(run func(ctx context.Context, rr []*responses.Shortener)) *MockUrls_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*responses.Shortener))
	})
	return _c
}

func (_c *MockUrls_Insert_Call) Return() *MockUrls_Insert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUrls_Insert_Call) RunAndReturn(run func(context.Context, []*responses.Shortener)) *MockUrls_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUrls creates a new instance of MockUrls. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrls(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrls {
	mock := &MockUrls{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
