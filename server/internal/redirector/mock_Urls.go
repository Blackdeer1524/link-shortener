// Code generated by mockery v2.43.2. DO NOT EDIT.

package redirector

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUrls is an autogenerated mock type for the Urls type
type MockUrls struct {
	mock.Mock
}

type MockUrls_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUrls) EXPECT() *MockUrls_Expecter {
	return &MockUrls_Expecter{mock: &_m.Mock}
}

// GetLongUrl provides a mock function with given fields: ctx, shortUrl
func (_m *MockUrls) GetLongUrl(ctx context.Context, shortUrl string) (string, error) {
	ret := _m.Called(ctx, shortUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetLongUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, shortUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrls_GetLongUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLongUrl'
type MockUrls_GetLongUrl_Call struct {
	*mock.Call
}

// GetLongUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - shortUrl string
func (_e *MockUrls_Expecter) GetLongUrl(ctx interface{}, shortUrl interface{}) *MockUrls_GetLongUrl_Call {
	return &MockUrls_GetLongUrl_Call{Call: _e.mock.On("GetLongUrl", ctx, shortUrl)}
}

func (_c *MockUrls_GetLongUrl_Call) Run(run func(ctx context.Context, shortUrl string)) *MockUrls_GetLongUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrls_GetLongUrl_Call) Return(_a0 string, _a1 error) *MockUrls_GetLongUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrls_GetLongUrl_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockUrls_GetLongUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUrls creates a new instance of MockUrls. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrls(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrls {
	mock := &MockUrls{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
