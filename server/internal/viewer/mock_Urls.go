// Code generated by mockery v2.43.2. DO NOT EDIT.

package viewer

import (
	context "context"
	domain "shortener/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUrls is an autogenerated mock type for the Urls type
type MockUrls struct {
	mock.Mock
}

type MockUrls_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUrls) EXPECT() *MockUrls_Expecter {
	return &MockUrls_Expecter{mock: &_m.Mock}
}

// History provides a mock function with given fields: ctx, userId
func (_m *MockUrls) History(ctx context.Context, userId string) ([]*domain.UrlInfo, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for History")
	}

	var r0 []*domain.UrlInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.UrlInfo, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.UrlInfo); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.UrlInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUrls_History_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'History'
type MockUrls_History_Call struct {
	*mock.Call
}

// History is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
func (_e *MockUrls_Expecter) History(ctx interface{}, userId interface{}) *MockUrls_History_Call {
	return &MockUrls_History_Call{Call: _e.mock.On("History", ctx, userId)}
}

func (_c *MockUrls_History_Call) Run(run func(ctx context.Context, userId string)) *MockUrls_History_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUrls_History_Call) Return(_a0 []*domain.UrlInfo, _a1 error) *MockUrls_History_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUrls_History_Call) RunAndReturn(run func(context.Context, string) ([]*domain.UrlInfo, error)) *MockUrls_History_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUrls creates a new instance of MockUrls. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrls(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrls {
	mock := &MockUrls{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
